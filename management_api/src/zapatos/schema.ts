/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.60), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import * as db from './src/core';

type BasicWhereableFromInsertable<T> = { [K in keyof T]: Exclude<T[K] | db.ParentColumn, null | db.DefaultType> };
type WhereableFromBasicWhereable<T> = { [K in keyof T]?: T[K] | db.SQLFragment<any, T[K]> };
type WhereableFromInsertable<T> = WhereableFromBasicWhereable<BasicWhereableFromInsertable<T>>;

/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export declare namespace board_sharings {
  export type Table = 'board_sharings';
  export interface Selectable {
    id: string;
    boardId: string;
    userId: string;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
  }
  export interface Insertable {
    id: string | db.Parameter<string> | db.SQLFragment;
    boardId: string | db.Parameter<string> | db.SQLFragment;
    userId: string | db.Parameter<string> | db.SQLFragment;
    createdAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    updatedAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    isArchived: boolean | db.Parameter<boolean> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'board_sharings_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace boards {
  export type Table = 'boards';
  export interface Selectable {
    id: string;
    ownerId: string;
    name: string;
    type: string | null;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
  }
  export interface Insertable {
    id: string | db.Parameter<string> | db.SQLFragment;
    ownerId: string | db.Parameter<string> | db.SQLFragment;
    name: string | db.Parameter<string> | db.SQLFragment;
    type?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    createdAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    updatedAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    isArchived: boolean | db.Parameter<boolean> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'boards_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace bookmarks {
  export type Table = 'bookmarks';
  export interface Selectable {
    id: string;
    title: string;
    description: string | null;
    url: string;
    boardId: string;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
  }
  export interface Insertable {
    id: string | db.Parameter<string> | db.SQLFragment;
    title: string | db.Parameter<string> | db.SQLFragment;
    description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    url: string | db.Parameter<string> | db.SQLFragment;
    boardId: string | db.Parameter<string> | db.SQLFragment;
    createdAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    updatedAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    isArchived: boolean | db.Parameter<boolean> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'bookmarks_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace migrations {
  export type Table = 'migrations';
  export interface Selectable {
    name: string;
  }
  export interface Insertable {
    name: string | db.Parameter<string> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'migrations_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace notes {
  export type Table = 'notes';
  export interface Selectable {
    id: string;
    title: string;
    content: string;
    boardId: string;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
  }
  export interface Insertable {
    id: string | db.Parameter<string> | db.SQLFragment;
    title: string | db.Parameter<string> | db.SQLFragment;
    content: string | db.Parameter<string> | db.SQLFragment;
    boardId: string | db.Parameter<string> | db.SQLFragment;
    createdAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    updatedAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    isArchived: boolean | db.Parameter<boolean> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'notes_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace pg_stat_statements {
  export type Table = 'pg_stat_statements';
  export interface Selectable {
    userid: number | null;
    dbid: number | null;
    queryid: number | null;
    query: string | null;
    calls: number | null;
    total_time: number | null;
    min_time: number | null;
    max_time: number | null;
    mean_time: number | null;
    stddev_time: number | null;
    rows: number | null;
    shared_blks_hit: number | null;
    shared_blks_read: number | null;
    shared_blks_dirtied: number | null;
    shared_blks_written: number | null;
    local_blks_hit: number | null;
    local_blks_read: number | null;
    local_blks_dirtied: number | null;
    local_blks_written: number | null;
    temp_blks_read: number | null;
    temp_blks_written: number | null;
    blk_read_time: number | null;
    blk_write_time: number | null;
  }
  export interface Insertable {
    userid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    dbid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    queryid?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    query?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
    calls?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    total_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    min_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    max_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    mean_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    stddev_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    rows?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    shared_blks_hit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    shared_blks_read?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    shared_blks_dirtied?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    shared_blks_written?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    local_blks_hit?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    local_blks_read?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    local_blks_dirtied?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    local_blks_written?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    temp_blks_read?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    temp_blks_written?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    blk_read_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
    blk_write_time?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = never;
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace sessions {
  export type Table = 'sessions';
  export interface Selectable {
    key: string;
    userId: string;
  }
  export interface Insertable {
    key: string | db.Parameter<string> | db.SQLFragment;
    userId: string | db.Parameter<string> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'sessions_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace tasks {
  export type Table = 'tasks';
  export interface Selectable {
    id: string;
    title: string;
    done: boolean;
    boardId: string;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
  }
  export interface Insertable {
    id: string | db.Parameter<string> | db.SQLFragment;
    title: string | db.Parameter<string> | db.SQLFragment;
    done: boolean | db.Parameter<boolean> | db.SQLFragment;
    boardId: string | db.Parameter<string> | db.SQLFragment;
    createdAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    updatedAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    isArchived: boolean | db.Parameter<boolean> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'tasks_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

export declare namespace users {
  export type Table = 'users';
  export interface Selectable {
    id: string;
    email: string;
    password: string;
    name: string;
    createdAt: Date;
    updatedAt: Date;
    isArchived: boolean;
  }
  export interface Insertable {
    id: string | db.Parameter<string> | db.SQLFragment;
    email: string | db.Parameter<string> | db.SQLFragment;
    password: string | db.Parameter<string> | db.SQLFragment;
    name: string | db.Parameter<string> | db.SQLFragment;
    createdAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    updatedAt: Date | db.Parameter<Date> | db.DateString | db.SQLFragment;
    isArchived: boolean | db.Parameter<boolean> | db.SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export interface Whereable extends WhereableFromInsertable<Insertable> { }
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | db.DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | db.DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'users_pkey' | 'users_email_key';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = board_sharings.Table | boards.Table | bookmarks.Table | migrations.Table | notes.Table | pg_stat_statements.Table | sessions.Table | tasks.Table | users.Table;
export type Selectable = board_sharings.Selectable | boards.Selectable | bookmarks.Selectable | migrations.Selectable | notes.Selectable | pg_stat_statements.Selectable | sessions.Selectable | tasks.Selectable | users.Selectable;
export type Whereable = board_sharings.Whereable | boards.Whereable | bookmarks.Whereable | migrations.Whereable | notes.Whereable | pg_stat_statements.Whereable | sessions.Whereable | tasks.Whereable | users.Whereable;
export type Insertable = board_sharings.Insertable | boards.Insertable | bookmarks.Insertable | migrations.Insertable | notes.Insertable | pg_stat_statements.Insertable | sessions.Insertable | tasks.Insertable | users.Insertable;
export type Updatable = board_sharings.Updatable | boards.Updatable | bookmarks.Updatable | migrations.Updatable | notes.Updatable | pg_stat_statements.Updatable | sessions.Updatable | tasks.Updatable | users.Updatable;
export type UniqueIndex = board_sharings.UniqueIndex | boards.UniqueIndex | bookmarks.UniqueIndex | migrations.UniqueIndex | notes.UniqueIndex | pg_stat_statements.UniqueIndex | sessions.UniqueIndex | tasks.UniqueIndex | users.UniqueIndex;
export type Column = board_sharings.Column | boards.Column | bookmarks.Column | migrations.Column | notes.Column | pg_stat_statements.Column | sessions.Column | tasks.Column | users.Column;
export type AllTables = [board_sharings.Table, boards.Table, bookmarks.Table, migrations.Table, notes.Table, pg_stat_statements.Table, sessions.Table, tasks.Table, users.Table];


export type SelectableForTable<T extends Table> = {
  board_sharings: board_sharings.Selectable;
  boards: boards.Selectable;
  bookmarks: bookmarks.Selectable;
  migrations: migrations.Selectable;
  notes: notes.Selectable;
  pg_stat_statements: pg_stat_statements.Selectable;
  sessions: sessions.Selectable;
  tasks: tasks.Selectable;
  users: users.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  board_sharings: board_sharings.Whereable;
  boards: boards.Whereable;
  bookmarks: bookmarks.Whereable;
  migrations: migrations.Whereable;
  notes: notes.Whereable;
  pg_stat_statements: pg_stat_statements.Whereable;
  sessions: sessions.Whereable;
  tasks: tasks.Whereable;
  users: users.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  board_sharings: board_sharings.Insertable;
  boards: boards.Insertable;
  bookmarks: bookmarks.Insertable;
  migrations: migrations.Insertable;
  notes: notes.Insertable;
  pg_stat_statements: pg_stat_statements.Insertable;
  sessions: sessions.Insertable;
  tasks: tasks.Insertable;
  users: users.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  board_sharings: board_sharings.Updatable;
  boards: boards.Updatable;
  bookmarks: bookmarks.Updatable;
  migrations: migrations.Updatable;
  notes: notes.Updatable;
  pg_stat_statements: pg_stat_statements.Updatable;
  sessions: sessions.Updatable;
  tasks: tasks.Updatable;
  users: users.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  board_sharings: board_sharings.UniqueIndex;
  boards: boards.UniqueIndex;
  bookmarks: bookmarks.UniqueIndex;
  migrations: migrations.UniqueIndex;
  notes: notes.UniqueIndex;
  pg_stat_statements: pg_stat_statements.UniqueIndex;
  sessions: sessions.UniqueIndex;
  tasks: tasks.UniqueIndex;
  users: users.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  board_sharings: board_sharings.Column;
  boards: boards.Column;
  bookmarks: bookmarks.Column;
  migrations: migrations.Column;
  notes: notes.Column;
  pg_stat_statements: pg_stat_statements.Column;
  sessions: sessions.Column;
  tasks: tasks.Column;
  users: users.Column;
}[T];

export type SQLForTable<T extends Table> = {
  board_sharings: board_sharings.SQL;
  boards: boards.SQL;
  bookmarks: bookmarks.SQL;
  migrations: migrations.SQL;
  notes: notes.SQL;
  pg_stat_statements: pg_stat_statements.SQL;
  sessions: sessions.SQL;
  tasks: tasks.SQL;
  users: users.SQL;
}[T];

